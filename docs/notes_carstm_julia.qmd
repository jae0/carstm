---
title: "CARSTM (Spatiotemporal GLM) in Julia/Turing with GP, factorials, etc"
header: "CARSTM in Julia"
date: \today
journal: 'biorxiv'
author:
- name: Jae S. Choi
  email: choi.jae.seok@gmail.com
#  footnote: 1
  orcid: 0000-0003-3632-5723 
#  corresponding: true
affiliation:
#- number: 1
#  name: Bedford Institute of Oceanography, Fisheries and Oceans Canada
keyword: |
	Keywords - Guassian Process / CAR , CARSTM Spatiotemporal models
abstract: |
	CARSTM in Julia simple data.
unnumberedsections: true
citeproc: true
citeproc-method: biblatex
biblatex: true
biblio-style: authoryear
biblatexoptions: |
 \usepackage[authordate, maxcitenames=1, uniquename=mininit, backend=biber, natbib]{biblatex-chicago}
# csl-refs: true
csl: media/chicago-author-date.csl
# csl: "https://raw.githubusercontent.com/citation-style-language/styles/master/harvard-anglia-ruskin-university.csl"
# csl from: Zotero Style Repository https://www.zotero.org/styles
# https://github.com/citation-style-language/styles  # to get more csl's
# https://www.overleaf.com/learn/latex/Biblatex_citation_styles
bibliography: references.bib
#standalone: true
acknowledgements: |
additionalinformation: |
documentclass: paper
papersize: letterpaper
fontsize: 11pt
output:
	pdf_document:
# remainder are Quarto options
toc: true
number-sections: true
highlight-style: pygments
editor:
  render-on-save: false
format:
  html: 
    code-fold: true
    html-math-method: katex
    embed-resources: true
  pdf:
    pdf-engine: lualatex
  docx: default 
---



<!-- This is a Markdown/Quarto/pandoc-latex document -->

<!-- 
As a Quarto doc.. copy this file to a work directory (e.g., ~/tmp/ )  and run Quarto from there:

# quarto render *.qmd --to html 

Can add "--to docx --to pdf" as additional documents, but their formatting is awkward and will require more work.  

## Examples

```r
#| eval: true
#| output: false
#| warning: false
#| error: false
# code evaluation
```


```r
#| eval: true
#| output: true
#| label: predator_list
#| tbl-cap: "All predators of snow crab on Scotian Shelf of Atlantic Canada. Of 58287 finfish stomach samples, 159 had snow crab (0.28%). There is no indormation on snow crab diet in the database."
# table
```

```{r}
#| eval: false
#| output: false
#| label: temp_depth
#| fig-cap: "Temperature and depths of snow crab predation on the Scotian Shelf of Atlantic Canada. Grey is all species observations in diet data base. Red is snow crab as prey."
#| fig-dpi: 144
#| fig-height: 4
# figure
```

-->


<!--
pandoc/latex template related ...to get started:

Write paper in as *.md, refs in references.bib and use my_template.tex as a pandoc template
Modify makefile as required

citations: are cited as \cite{mittner2014brain} 

equations: 
	referenced as:  eq. (\ref{1}) 
	tagged as:  $$ \pi=\pi \tag{1a} \label{1}$$

pictures:
	referenced as: figure \ref{fig2}
    tagged as: ![my figure captions. \label{fig2}](Figures\Tolmukapea.jpg){width=100px height=50px} 
    
    no working: fignos ..  Fig. @fig:dummy{#fig:dummy width=40% height=20%}

tables: 
	do same as pictures or
	direct latex Tables: 
	
	\begin{table}[ht]
	\centering
	\caption{Probability to observe Bayes Factors of a certain magnitude or above for the used sample-size of $N=60$ assuming the original and the null-hypothesis.}
	\begin{tabular}{llrrr}
	  & & \multicolumn{3}{l}{$P(\text{BF}\ge\theta)$}\\
	  Hypothesis & BF Type & $\theta=3$ & $\theta=10$ & $\theta=20$ \\
	  \hline
	  $d\sim \mathcal{N}(1.57, 0.51)$ & JZS BF$_{10}$ & 0.98 & 0.97 & 0.96 \\
		 & Replication BF$_{10}$ & 0.98 & 0.96 & 0.96 \\
		 & Meta-Analysis BF$_{10}$ & 0.99 & 0.99 & 0.99 \\\cline{2-5}
		$d=0$ & JZS BF$_{01}$ & 0.81 & 0.00 & 0.00 \\
	   & Replication BF$_{01}$ & 0.98 & 0.95 & 0.91 \\
		 & Meta-Analysis BF$_{01}$ & 0.63 & 0.27 & 0.06 \\
	   \hline
	\end{tabular}
	\label{tab:probbf}
	\end{table}

-->



<!--
# Example Makefile for operating with pandoc/latex:
FILENAME=thermodynamics_onsager
TEMPLATE=my_template.tex
PDFENGINE=lualatex

# export TEXINPUTS=.:media//:
# export BIBINPUTS=.:media//:
# export BSTINPUTS=.:media//:

all: latex pdf 

latex: 
	pandoc $(FILENAME).md \
	--from=markdown+tex_math_single_backslash+tex_math_dollars+raw_tex \
	--to=latex --template=$(TEMPLATE) \
	--output=$(FILENAME).tex \
	--pdf-engine=$(PDFENGINE)

pdf: latex  
	pdflatex $(FILENAME).tex
	biber $(FILENAME) 
	pdflatex $(FILENAME).tex
	pdflatex $(FILENAME).tex

view: 
	zathura $(FILENAME).pdf 

test: 
	pandoc -s $(FILENAME).md \
	--from=markdown+tex_math_single_backslash+tex_math_dollars+raw_tex \
	--to=latex --template=$(TEMPLATE) \
	--output=$(FILENAME).pdf \
	--pdf-engine=$(PDFENGINE)
	pdflatex $(FILENAME).tex

html:
	pandoc $(FILENAME).md \
	--from=markdown+tex_math_single_backslash+tex_math_dollars \
	--to=html5 \ 
	--output=$(FILENAME).html \
	--mathjax \
	--self-contained

epub:
	pandoc $(FILENAME).md \
	--from=markdown+tex_math_single_backslash+tex_math_dollars \
	--to=epub \
	--output=$(FILENAME).epub \
	--epub-cover-image=<cover-image> \
	--toc

docx:
	pandoc $(FILENAME).md \
	--from=markdown+tex_math_single_backslash+tex_math_dollars \
	--to=docx \
	--output=$(FILENAME).docx \


odt:
	pandoc $(FILENAME).md \
	--from=markdown+tex_math_single_backslash+tex_math_dollars \
	--to=odt \
	--output=$(FILENAME).odt \

  
git:
	git commit -m"update"
	git checkout master
	git merge develop
	git push
	git pull
	git checkout develop
	git merge master
	git status
	

 
watch: $(FILENAME).md 
	fswatch -o $^ | xargs -n1 -I{} make

.PHONY: clean all

clean:
	rm -rf *.aux *.bbl *.bcf *.blg *.log *.out  *.run.xml *.spl  *.docx *.odt *.epub *.html
	

-->


<!-- This is a Markdown/Quarto document -->

<!-- 
Copy this file to a work directory (e.g., ~/tmp/ ) 
and run Quarto from there:

# quarto render *.qmd --to html 

Can add "--to docx --to pdf" as additional documents, but their formatting is awkward and will require more work.  
-->



```julia
    # Generate some non-linear data
    using Random
    using StatsModels
    using DataFrames
    using Distributions
    
    # load support functions
    source_directory = "/home/jae/bio/carstm/"  # change to location of carstm

    include( joinpath( source_directory, "regression_functions.jl"  ))  

    N  =1000
    yvar, df, dmat, dmatnm, tnm = example_data(N=N)

    using Plots
    Plots.scatter(df.xvar, yvar)
```

## Now model inference with GP

```julia

    # Import Libraries
    using Turing
    using Turing: Variational
    using Bijectors

    using Distances 

    using StatsFuns
    using Flux
    import LinearAlgebra


    # make model
    xvar_gp =  reshape( df, N, 1)   # simple reshaping .. direct copy 1285.74 seconds
    
    discretize = false
    if discretize
        # discretize/bin to speed up GP:  1600s  .. actually no real speed benefit 
        using StatsBase
        h = fit(Histogram, df.xvar)
        # h.weights
        edges = collect( h.edges )[]
        labels = edges[1:(end-1)] .+ diff(edges) ./ 2.0
        xvar_gp = unwrap.( cut( df.xvar,  edges, extend=true, labels=labels ) )
        xvar_gp = reshape( xvar_gp, N, 1)
    end
 

    Random.seed!(0)
    m = GP(yvar, xvar_gp )
    rand( m )  # test

 
    advi_do = false
    if advi_do
        # Fit via ADVI. You can also use HMC, NUTS ... no real speed benefit with ADVI
        # initialize variational distribution (optional)
        q0 = Variational.meanfield(m) 
        advi = ADVI(1, 2000)    # num_elbo_samples, max_iters
        q = vi(m, advi, q0, optimizer=Flux.ADAM(1e-1));
        # Get posterior samples
        extract_gp = make_extractor_avdi(m, q)
        mu = vec(extract_gp(:mu))
        sig2 = vec(extract_gp(:sig2))
        phi = vec(extract_gp(:phi));
    end
 
    # Fit via NUTS
    chain = sample( m, NUTS(), 200)  # Ïµ = 0.2
    mu = group(chain, :mu).value.data[:, :, 1]
    sig2 = group(chain, :sig2).value.data[:, :, 1]
    phi = group(chain, :phi).value.data[:, :, 1];

```

## Predictions

```julia
    # Make predictions at new locations.
    Xnew = sort(randn(N, 1) * 4, dims=1)
    gp_predict = make_gp_predict_fn(Xnew, yvar, xvar, exp_cov_fn)
    ynew = [gp_predict(mu[m], sig2[m], phi[m]) for m in 1:length(mu)]
    ynew = hcat(ynew...);


    # Plot predictions
    pred_mean = mean(ynew, dims=2)
    pred_lower = quantiles(ynew, 0.025, dims=2)
    pred_upper = quantiles(ynew, 0.975, dims=2)
    pl = Plots.plot(vec(Xnew), vec(pred_mean), color="red", label="Posterior predictive mean")
    pl = Plots.scatter(pl, vec(df.xvar), vec(yvar), color="grey", label="Data")
    pl = Plots.plot(pl, vec(Xnew), vec(pred_upper), color="red", alpha=0.2)
    pl = Plots.plot(pl, vec(Xnew), vec(pred_lower), color="red", alpha=0.2)


```


